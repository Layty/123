<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    <!-- ButtonStyle-->
    <!-- 支持旋转变换的按钮-->
    <Style x:Key="CloseButtonRotateAngle" TargetType="{x:Type Button}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard Name="rotateStoryboardBegin">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Content.RenderTransform.Angle"
                                             To="90" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Content.RenderTransform.Angle"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MinButtonTransformY" TargetType="{x:Type Button}">

        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform Y="0.5" X="0.5" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Y" To="5" Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Y" To="0" Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="MyButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Margin" Value="5" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontFamily" Value="宋体" />
        <Setter Property="FontWeight" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="10"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"

                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"
                                                    To="Green" Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="border"
                                                    Storyboard.TargetProperty="Background.Color"
                                                    To="Pink" Duration="0:0:0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!-- TextBlockStyle-->
    <!-- 支持旋转变换的文本-->
    <Style x:Key="CloseTextBlockRotateAngle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="TextBlock.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard Name="rotateStoryboardBegin">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                                             To="360" Duration="0:0:0.5" RepeatBehavior="Forever" />
                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="Red" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="TextBlock.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                                             Duration="0:0:0.5" />
                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="Transparent"
                                            Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <!-- 支持向下偏移变换的文本-->
    <Style x:Key="MinTextBlockTransformY" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform Y="0.5" X="0.5" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Y" To="5" Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Y" To="0" Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

    </Style>


    <Style x:Key="MyTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontFamily" Value="宋体" />
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Margin" Value="4" />
        <!--<Setter Property="Template">
               <Setter.Value>
                   <ControlTemplate TargetType="{x:Type TextBox}">
                       <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                               CornerRadius="10"
                               BorderThickness="1"
                               Background="{TemplateBinding Background}" >
                           <ContentPresenter x:Name="contentPresenter" Focusable="True"
                                             HorizontalAlignment="Center"
                                             Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                             VerticalAlignment="Center" />
                       </Border>
                    </ControlTemplate>
               </Setter.Value>
           </Setter>-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsFocused" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="Blue" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MyTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontFamily" Value="宋体" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="Black" />
    </Style>
    <Style x:Key="MyBigFontButtonStyle">
        <!--在 Window 资源管理区定义样式-->
        <Setter Property="Button.FontFamily" Value="宋体" />
        <Setter Property="Button.FontSize" Value="12" />
        <Setter Property="Button.FontWeight" Value="Bold" />
        <Setter Property="Button.Margin" Value="1" />
        <Setter Property="Button.Background">
            <Setter.Value>
                <!--为按钮定义一个渐变画刷的复杂属性-->
                <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="AliceBlue" Offset="1" />
                        <GradientStop Color="Aqua" Offset="0" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StyleStackPanelMouseMoveStyle" TargetType="StackPanel">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Opacity" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MouseMoveStyle" TargetType="TextBlock">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Aqua" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}">
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
        <Style.BasedOn>
            <Style TargetType="{x:Type TextBox}">
                <Style.BasedOn>
                    <Style TargetType="{x:Type TextBoxBase}">
                        <Setter Property="Foreground"
                                Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
                        <Setter Property="BorderThickness" Value="0,0,0,1" />
                        <Setter Property="materialDesign:TextFieldAssist.TextBoxViewMargin" Value="1,0" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="VerticalContentAlignment" Value="Top" />
                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        <Setter Property="AllowDrop" Value="True" />
                        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate />
                            </Setter.Value>
                        </Setter>
                        <Setter Property="materialDesign:TextFieldAssist.IncludeSpellingSuggestions"
                                Value="{Binding (SpellCheck.IsEnabled), RelativeSource={RelativeSource Self}}" />
                        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush"
                                Value="{DynamicResource PrimaryHueMidBrush}" />
                        <Setter Property="materialDesign:HintAssist.Foreground"
                                Value="{DynamicResource PrimaryHueMidBrush}" />
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu>
                                    <MenuItem Command="ApplicationCommands.Cut">
                                        <MenuItem.Icon>
                                            <materialDesign:PackIcon Kind="Scissors" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="ApplicationCommands.Copy">
                                        <MenuItem.Icon>
                                            <materialDesign:PackIcon Kind="ContentCopy" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="ApplicationCommands.Paste">
                                        <MenuItem.Icon>
                                            <materialDesign:PackIcon Kind="ContentPaste" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                                    <Condition Property="IsSelectionActive" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Property="SelectionBrush"
                                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                            </MultiTrigger>
                        </Style.Triggers>
                    </Style>
                </Style.BasedOn>
            </Style>
        </Style.BasedOn>
    </Style>
    <Style x:Key="TextBlockLinearColorBrush" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0 0" EndPoint="1 1">
                    <GradientStop Offset="0" Color="Brown" />
                    <GradientStop Offset="0.3" Color='Red' />
                    <GradientStop Offset="0.6" Color="Orange" />
                    <GradientStop Offset="1" Color="Yellow" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxStyle1" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" ClipToBounds="{TemplateBinding ClipToBounds}"
                            Margin="{TemplateBinding Margin}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" Storyboard="{x:Null}"
                                                      To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="MouseOverBorder" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.6"
                                                      GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}"
                                                      To="{x:Null}" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.18" Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="SelectedBorder" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.03" Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="SelectedBorder" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border x:Name="MouseOverBorder" Opacity="0">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black" />
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                            </Border>
                            <Border x:Name="SelectedBorder" Opacity="0" RenderTransformOrigin="0.5,0.5">
                                <Border.Background>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black" />
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Border.Background>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="1" />
                                </Border.RenderTransform>
                            </Border>
                            <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   Content="{TemplateBinding Content}" Focusable="False"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   Padding="{TemplateBinding Padding}"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <materialDesign:Ripple.Feedback>
                                    <TemplateBinding Property="Foreground">
                                        <TemplateBinding.Converter>
                                            <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black" />
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </materialDesign:Ripple.Feedback>
                            </materialDesign:Ripple>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxStyle2" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxStyle311" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- DataGridTextColumn 文字居中 -->
    <Style x:Key="CenterAlignmentStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- DataGridTextColumn 文字居中 -->
    <Style x:Key="LeftAlignmentStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


</ResourceDictionary>